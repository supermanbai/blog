<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[七种实现左侧固定，右侧适应两栏自适应的方法]]></title>
    <url>%2F2018%2F10%2F09%2F%E4%B8%83%E7%A7%8D%E5%AE%9E%E7%8E%B0%E5%B7%A6%E4%BE%A7%E5%9B%BA%E5%AE%9A%EF%BC%8C%E5%8F%B3%E4%BE%A7%E9%80%82%E5%BA%94%E4%B8%A4%E6%A0%8F%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[总结一下左边固定的方法，老生常谈的是float方法，bfc方法，也有css3中的flex布局和grid布局,并非所有的布局都会在开发中使用 常用的宽度自适应的方法通常是利用了block水平的元素宽度能够随父容器调节的流动特性，另外一种思路是利用CSS中的calc()方法来动态设定宽度。还有一种思路是，利用CSS中的新型布局flex layout与grid layout。 首先创建html布局最基本的样式123456789&lt;div class=&quot;wrapper&quot; id=&quot;wrapper&quot;&gt; &lt;div class=&quot;left&quot;&gt; 左边固定宽度，高度不固定 &lt;/br&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt;高度有可能会很小，也可能很大。 &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; 这里的内容可能比左侧高，也可能比左侧低。宽度需要自适应。&lt;/br&gt; 基本的样式是，两个div相距20px, 左侧div宽 120px &lt;/div&gt;&lt;/div&gt; 基本的样式是，两个盒子相距20px, 左侧盒子宽 120px，右侧盒子宽度自适应。基本的CSS样式如下: 123456789101112.wrapper &#123; padding: 15px 20px; border: 1px dashed #ff6c60;&#125;.left &#123; width: 120px; border: 5px solid #ddd;&#125;.right &#123; margin-left: 20px; border: 5px solid #ddd;&#125; 下面的代码都是基于这套基本代码做覆盖，通过给容器添加不同的类来实现效果。 双inline-block方案 12345678910111213141516.wrapper-inline-block &#123; box-sizing: content-box; font-size: 0; // 消除空格的影响&#125;.wrapper-inline-block .left,.wrapper-inline-block .right &#123; display: inline-block; vertical-align: top; // 顶端对齐 font-size: 14px; box-sizing: border-box;&#125;.wrapper-inline-block .right &#123; width: calc(100% - 140px);&#125; 这种方法是通过width: calc(100% - 140px)来动态计算右侧盒子的宽度。需要知道右侧盒子距离左边的距离，以及左侧盒子具体的宽度(content+padding+border)，以此计算父容器宽度的100%需要减去的数值。同时，还需要知道右侧盒子的宽度是否包含border的宽度。在这里，为了简单的计算右侧盒子准确的宽度，设置了子元素的box-sizing:border-box;以及父元素的box-sizing: content-box;。同时，作为两个inline-block的盒子，必须设置vertical-align来使其顶端对齐。另外，为了准确地应用计算出来的宽度，需要消除div之间的空格，需要通过设置父容器的font-size: 0;,或者用注释消除html中的空格等方法。 缺点 需要知道左侧盒子的宽度，两个盒子的距离，还要设置各个元素的box-sizing 需要消除空格字符的影响 需要设置vertical-align: top满足顶端对齐。 双float方案 1234567891011121314.wrapper-double-float &#123; overflow: auto; // 清除浮动 box-sizing: content-box;&#125;.wrapper-double-float .left,.wrapper-double-float .right &#123; float: left; box-sizing: border-box;&#125;.wrapper-double-float .right &#123; width: calc(100% - 140px);&#125; 本方案和双float方案原理相同，都是通过动态计算宽度来实现自适应。但是，由于浮动的block元素在有空间的情况下会依次紧贴，排列在一行，所以无需设置display: inline-block;，自然也就少了顶端对齐，空格字符占空间等问题。 缺点 需要知道左侧盒子的宽度，两个盒子的距离，还要设置各个元素的box-sizing。 父元素需要清除浮动。 float+margin-left方案 1234567891011.wrapper-float &#123; overflow: hidden; // 清除浮动&#125;.wrapper-float .left &#123; float: left;&#125;.wrapper-float .right &#123; margin-left: 150px;&#125; 上面两种方案都是利用了CSS的calc()函数来计算宽度值。下面两种方案则是利用了block级别的元素盒子的宽度具有填满父容器，并随着父容器的宽度自适应的流动特性。但是block级别的元素都是独占一行的，所以要想办法让两个block排列到一起。我们知道，block级别的元素会认为浮动的元素不存在，但是inline级别的元素能识别到浮动的元素。这样，block级别的元素就可以和浮动的元素同处一行了。为了让右侧盒子和左侧盒子保持距离，需要为左侧盒子留出足够的距离。这个距离的大小为左侧盒子的宽度以及两个盒子之间的距离之和。然后将该值设置为右侧盒子的margin-left。 缺点 需要清除浮动 需要计算右侧盒子的margin-left 使用float+BFC方法 上面的方法都需要通过左侧盒子的宽度，计算某个值，下面三种方法都是不需要计算的。只需要设置两个盒子之间的间隔。 12345678910111213.wrapper-float-bfc &#123; overflow: auto;&#125;.wrapper-float-bfc .left &#123; float: left; margin-right: 20px;&#125;.wrapper-float-bfc .right &#123; margin-left: 0; overflow: auto;&#125; 这个方案同样是利用了左侧浮动，但是右侧盒子通过overflow: auto;形成了BFC，因此右侧盒子不会与浮动的元素重叠。 这种情况下，只需要为左侧的浮动盒子设置margin-right，就可以实现两个盒子的距离了。而右侧盒子是block级别的，所以宽度能实现自适应。 缺点 父元素需要清除浮动 flex方案 123456789101112.wrapper-flex &#123; display: flex; align-items: flex-start;&#125;.wrapper-flex .left &#123; flex: 0 0 auto;&#125;.wrapper-flex .right &#123; flex: 1 1 auto;&#125; flex可以说是最好的方案了，代码少，使用简单。有朝一日，大家都改用现代浏览器，就可以使用了。需要注意的是，flex容器的一个默认属性值:align-items: stretch;。这个属性导致了列等高的效果。为了让两个盒子高度自动，需要设置: align-items: flex-start; grid方案 又一个新型的布局方式。可以满足需求，但这并不是它发挥用处的真正地方。 12345678910111213141516171819.wrapper-grid &#123; display: grid; grid-template-columns: 120px 1fr; align-items: start;&#125;.wrapper-grid .left,.wrapper-grid .right &#123; box-sizing: border-box;&#125;.wrapper-grid .left &#123; grid-column: 1;&#125;.wrapper-grid .right &#123; grid-column: 2;&#125; 注意 grid布局也有列等高的默认效果。需要设置: align-items: start;。 grid布局还有一个值得注意的小地方和flex不同:在使用margin-left的时候，grid布局默认是box-sizing设置的盒宽度之间的位置。而flex则是使用两个div的border或者padding外侧之间的距离。]]></content>
      <categories>
        <category>html|布局</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap导航条遇到的小case]]></title>
    <url>%2F2018%2F10%2F08%2Fbootstrap%E5%AF%BC%E8%88%AA%E6%9D%A1%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Bootstrap导航条的下拉列表显示不完全 类名navbar不能设置高度 设置高度就会让nav下拉的过程中出现导航条（如图右侧灰色的部分） bootstrap 中下拉列表中的两个div要同级 BING QIE 一个设置position:relative;一个设置position:solutate]]></content>
      <categories>
        <category>小case</category>
      </categories>
      <tags>
        <tag>hexo github 搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[case]]></title>
    <url>%2F2018%2F10%2F08%2Fhhhh%2F</url>
    <content type="text"><![CDATA[123456789]]></content>
      <categories>
        <category>小case</category>
      </categories>
      <tags>
        <tag>hexo github 搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更换hexo主题]]></title>
    <url>%2F2018%2F09%2F30%2F%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[准备工作 查看好你想要的主题 然后下载下来开始工作 我们先准备一个新的主题，比较有名的就是NexT了，下面以他为例：12下载主题，输入命令git clone https://github.com/iissnan/hexo-theme-next themes/next 修改显示的主题在项目目录下查找_config.yml找到theme123456title: 网站名称subtitle: 子名称description: 网站简介author: 作者名language: 简体汉语timezone: 时区 设置Scheme在主题目录下找到_config.yml可以设置Scheme主题12345# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 设置菜单同样在主题目录的配置文件中menu配置123456789menu: home: / || home /为url链接。home为显示的图标 #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 然后可以新生成page12hexo new page tags 生成标签页 路径hexo new page categories 生成分类页面 然后就可以测试了1hexo s -debug 基本的设置就是这样，如果还要有什么改动可以参考http://theme-next.iissnan.com/theme-settings.html进行配置]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo github 搭建博客]]></title>
    <url>%2F2018%2F09%2F30%2Fsettingup%20the%20environment%2F</url>
    <content type="text"><![CDATA[hexo github 搭建博客 搭建环境 git node.js 搭建命令 hexo init 初始化项目 hexo g 部署之前预先生成静态文件 hexo d 部署项目 hexo s 本地预览 localhost:4000 我的hexo博客是部署在github上的，之前上传到github上真是废了九牛二虎之力，配置ssh出现了一系列的问题，在这里我们来梳理一下hexo搭建的过程： 首先搭建环境：1.1安装git —— 安装Git，正常配置就好 Git的下载地址 请点击Nest 接着点击两次Next,会出现下图 ↓↓↓ 然后深深呼吸一口气，呼吸期间点击Next，然后你就会发现点着点着就出现个Install，没错，我们堵的，不是，我们等的就是Install这个小子， 安装完成之后，单击鼠标右键你就会看到: Git GUI Here Git Bash Here 安装成功 1.2安装Node.js Node.js 安装———菜鸟教程，不再叙述 2.安装hexo在本地新建文件夹，命名规范，要用英文，文件夹名称我们这里就叫做hexodemo，在hexodemo文件夹中右键Git Bash Here 首先下载hexo,在git命令行中输入 npm install -g hexo，等待的过程不要着急，五分钟之后就安装好了。 输入命令：hexo init 初始化hexo 打开hexo文件夹，在_config.yml,进行基础配置查看hexo官方文档浏览更多主题查看如何更换主题]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo github 搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我生命中的一部分]]></title>
    <url>%2F2018%2F05%2F31%2F%E6%88%91%E7%94%9F%E5%91%BD%E4%B8%AD%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%2F</url>
    <content type="text"><![CDATA[我生命中的一部分叫做求职（求知）面试&nbsp; &nbsp; 我认为在这一面试的过程中，既是对以往学习的检视，又是一个重新认识自己的过程，面试过程中，会知道自己哪些方面不足，哪些方面欠缺，这样，又是给以后的学习过程中指明了一个方向。 ![你以为找工作会是这样的] 但是 现实中 总结几点面试之所以这么难，还是因为自身经验和准备都不够充分，在学习的路上我们要一路向前。之前一直在思考为什么会出现这种困境，不久，我便在朋友圈找到了问题的答案，分享给大家，共勉!!! 懒而不自知，知而不能改，改而不能恒 前端小白]]></content>
      <categories>
        <category>找工作</category>
      </categories>
      <tags>
        <tag>我生命中的一部分</tag>
      </tags>
  </entry>
</search>
